buildscript {
  ext {
    kotlinVersion = "1.2.10"
    lombokVersion = "1.16.18"
    slf4jVersion = "1.7.25"
    junitJupiterVersion = "5.0.2"
    junitPlatformVersion = "1.0.2"

    branchName = "mvn-repo"
    mvnRepoDir = "$buildDir/$branchName"
  }
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    classpath "org.junit.platform:junit-platform-gradle-plugin:$junitPlatformVersion"
  }
}

plugins {
  id "java"
  id "maven-publish"
  id "org.ajoberstar.git-publish" version "0.2.2"
}

apply plugin: "kotlin"
apply plugin: "org.junit.platform.gradle.plugin"

group "daggerok"
version "0.0.1"
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

compileKotlin {
  kotlinOptions.jvmTarget = project.targetCompatibility
}

compileTestKotlin {
  kotlinOptions.jvmTarget = project.targetCompatibility
}

repositories {
  mavenCentral()
}

dependencies {

  compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion",
      // @Slf4j
      "org.slf4j:slf4j-api:$slf4jVersion",
      "org.slf4j:jul-to-slf4j:$slf4jVersion",
      "org.slf4j:log4j-over-slf4j:$slf4jVersion",
      "ch.qos.logback:logback-classic:1.2.3"

  compileOnly "org.projectlombok:lombok:$lombokVersion"

  // junit 5
  testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion",
      // hamcrest asserts, like: assertThat
      "org.hamcrest:hamcrest-core:1.3"

  testRuntime "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion",
      "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion",
      // IDEA (older bundle):
      "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"

  testCompileOnly "org.apiguardian:apiguardian-api:1.0.0",
      "org.projectlombok:lombok:$lombokVersion"
}

publishing {
  repositories {
    maven {
      // change to point to your repo, e.g. http://my.org/repo
      url "$mvnRepoDir"
    }
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}

task travisYaml(type: Copy, dependsOn: [publish]) {
  from ".travis.yml"
  into "$mvnRepoDir"
}

gitPublish {

  // where to publish to (repo must exist)
  repoUri = "git@github.com:daggerok/publish-to-github-example.git"

  // branch will be created if it doesn"t exist
  branch = "$branchName"

  // by default: $buildDir/gitPublish
  repoDir = file("$mvnRepoDir")

  // what to keep in the existing branch (include=keep)
  preserve {
    include "**/maven-producer/**"
    include "**/.travis.yml"
    include "**/.nojekyll"
  }

  // message used when committing changes
  commitMessage = "Gradle artifacts for ${project.group}:${project.name}:$project.version" // defaults to "Generated by gradle-git-publish"
}

gitPublishCopy.dependsOn travisYaml

task deploy(dependsOn: gitPublishPush)
